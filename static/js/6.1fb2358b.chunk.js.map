{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","genreInputRef","useState","isEntering","setIsEntering","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","enteredGenre","onAddQuote","author","text","genre","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","history","useHistory","useHttp","addQuote","sendRequest","status","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yGCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,wBC8D/BC,EA1DG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBACfE,EAAgBF,mBACtB,EAAoCG,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACE,qCACE,cAAC,IAAD,CACIC,KAAMF,EACNG,QAAS,SAACC,GAAD,MAAc,0EAC3B,cAAC,EAAD,UACA,uBAAMC,QAdkB,WAC1BJ,GAAc,IAawBX,UAAWC,IAAQe,KAAMC,SAxBjE,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBf,EAAegB,QAAQC,MACvCC,EAAchB,EAAac,QAAQC,MACnCE,EAAehB,EAAca,QAAQC,MAE3CvB,EAAM0B,WAAW,CAAEC,OAAQN,EAAeO,KAAMJ,EAAaK,MAAOJ,KAiBlE,UACGzB,EAAM8B,WACL,qBAAK7B,UAAWC,IAAQ6B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK/B,UAAWC,IAAQ+B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK/B,OAEtC,sBAAKL,UAAWC,IAAQ+B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAK7B,OAEpC,sBAAKP,UAAWC,IAAQ+B,QAAxB,UACE,uBAAOC,QAAQ,QAAf,mBACA,uBAAOC,KAAK,OAAOC,GAAG,QAAQC,IAAK5B,OAErC,qBAAKR,UAAWC,IAAQqC,QAAxB,SACE,wBAAQtC,UAAU,MAAMuC,QA9BF,WAC5B5B,GAAc,IA6BR,kCCjCK6B,UAlBE,WACb,IAAMC,EAAUC,cAChB,EAA8BC,YAAQC,KAA/BC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAEpBC,qBAAU,WACQ,cAAXD,GACCL,EAAQO,KAAK,aAGlB,CAACF,EAAQL,IAMZ,OAAO,cAAC,EAAD,CAAWZ,UAAsB,YAAXiB,EAAsBrB,WAJ3B,SAACwB,GACrBJ,EAAYI","file":"static/js/6.1fb2358b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1P74U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2-zTV\",\"loading\":\"QuoteForm_loading__MrkGw\",\"control\":\"QuoteForm_control__2nnDq\",\"actions\":\"QuoteForm_actions__QyqNq\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const genreInputRef = useRef();\n  const [isEntering, setIsEntering] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n    const enteredGenre = genreInputRef.current.value;\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText, genre: enteredGenre });\n  }\n\n  const formFocussedHandler = () => {\n    setIsEntering(true);\n  } \n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  } \n\n  return (\n    <>\n      <Prompt \n          when={isEntering} \n          message={(location) => 'Are you sure, you want to leave? All your entered data will be lost.' } />\n      <Card>\n      <form onFocus={formFocussedHandler} className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Author</label>\n          <input type='text' id='author' ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Text</label>\n          <textarea id='text' rows='5' ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='genre'>Genre</label>\n          <input type='text' id='genre' ref={genreInputRef} />\n        </div>\n        <div className={classes.actions}>\n          <button className='btn' onClick={finishEnteringHandler} >Add Quote</button>\n        </div>\n      </form>\n    </Card>\n    </>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\n\r\nconst NewQuote = () => {\r\n    const history = useHistory();\r\n    const {sendRequest, status} = useHttp(addQuote); \r\n    \r\n    useEffect(() => {\r\n        if(status === 'completed') {\r\n            history.push('/quotes');\r\n        }\r\n\r\n    }, [status, history]);\r\n\r\n    const addQuoteHandler = (quoteData) => {\r\n        sendRequest(quoteData);        \r\n    }\r\n\r\n    return <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />;\r\n}\r\n\r\nexport default NewQuote;"],"sourceRoot":""}