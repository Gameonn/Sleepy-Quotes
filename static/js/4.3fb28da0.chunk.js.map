{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","trim","length","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","onClick","HighlightedQuote","author","genre","quote","to","QuoteDetail","match","useRouteMatch","getSingleQuote","getRandomQuote","loadedQuote","path","exact","url","component"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,MAAQ,kC,gJCqCXC,EAhCQ,SAACC,GACtB,IAAMC,EAAiBC,mBACvB,EAAqCC,YAAQC,KAAtCC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAAQC,EAA5B,EAA4BA,MACpBC,EAAmBR,EAAnBQ,eAERC,qBAAU,WACM,cAAXH,GAA2BC,GAC5BC,MAED,CAACF,EAAQC,EAAOC,IAEnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBACN,IAAMC,EAAcZ,EAAea,QAAQC,MACxCF,EAAYG,OAAOC,QACpBZ,EAAa,CAACa,YAAa,CAAEC,KAAMN,GAAcO,QAASpB,EAAMoB,WAGpE,OACE,uBAAMC,UAAWC,IAAQC,KAAMC,SAAUd,EAAzC,UACc,YAAXJ,GAAwB,sBAAKe,UAAU,WAAf,cAA2B,cAACI,EAAA,EAAD,OACpD,sBAAKJ,UAAWC,IAAQI,QAASF,SAAUd,EAA3C,UACE,uBAAOiB,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAK7B,OAEvC,qBAAKoB,UAAWC,IAAQS,QAAxB,SACE,wBAAQV,UAAU,MAAlB,+B,iBCtBOW,EARK,SAAChC,GACnB,OACE,oBAAIqB,UAAWC,IAAQW,KAAvB,SACE,4BAAIjC,EAAMmB,U,iBCQDe,EAVM,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACrB,OACE,oBAAId,UAAWC,IAAQa,SAAvB,SACGA,EAASC,KAAI,SAACC,GAAD,OACZ,cAAC,EAAD,CAA8BlB,KAAMkB,EAAQlB,MAA1BkB,EAAQT,UC0CnBU,EAvCE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEOrB,EADQsB,cACRtB,QAEP,EAAqDjB,YAAQwC,KAArDtC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcsC,EAAnC,EAA6BC,KAE7BpC,qBAAU,WACRJ,EAAYe,KACX,CAACf,EAAae,IAEjB,IAQIe,EAJEW,EAAsBC,uBAAY,WACtC1C,EAAYe,KACX,CAACf,EAAae,IAQjB,MAJc,YAAXd,IAAsB6B,EAAY,sBAAKd,UAAU,WAAf,cAA2B,cAACI,EAAA,EAAD,IAA3B,QACvB,cAAXnB,GAA2BsC,GAAkBA,EAAe3B,OAAS,IAAKkB,EAAY,cAAC,EAAD,CAAcA,SAAUS,KACnG,cAAXtC,GAA4BsC,GAAmBA,EAAe3B,SAASkB,EAAY,mBAAGd,UAAU,WAAb,0CAGpF,0BAASA,UAAWC,IAAQa,SAA5B,UACE,gDACEK,GACA,wBAAQnB,UAAU,MAAM2B,QAlBC,WAC7BP,GAAmB,IAiBf,2BAIDD,GAAmB,cAAC,EAAD,CAAgBpB,QAASA,EAASZ,eAAgBsC,IACrEX,M,iBC5BQc,EAZU,SAAC,GAA2B,IAA1B9B,EAAyB,EAAzBA,KAAM+B,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,MACvC,OACE,yBAAQ9B,UAAWC,IAAQ8B,MAA3B,UACE,4BAAIjC,IACJ,qCACE,eAAC,IAAD,CAAMkC,GAAE,yBAAoBH,GAAU7B,UAAU,MAAhD,cAAwD6B,EAAxD,SAEF,eAAC,IAAD,CAAMG,GAAE,wBAAmBF,GAAS9B,UAAU,MAA9C,cAAsD8B,EAAtD,WC8BSG,UAhCK,WAChB,IACOlC,EADQsB,cACRtB,QACDmC,EAAQC,cACd,EAAwDrD,YACpDiB,EAAUqC,IAAiBC,KAAgB,GADxCrD,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAAcqD,EAAlC,EAA4Bd,KAAmBtC,EAA/C,EAA+CA,MAO/C,OAJAE,qBAAU,WACNJ,EAAYe,KACb,CAACf,EAAae,IAEH,YAAXd,EAA8B,qBAAKe,UAAU,WAAf,SAA0B,cAACI,EAAA,EAAD,MAExDlB,EAAe,oBAAGc,UAAU,mBAAb,cAAkCd,EAAlC,OAEdoD,EAAYxC,KAGZ,iCACMC,GAAW,wBAAQC,UAAU,YAAY2B,QAAS3C,EAAvC,uBACb,cAAC,EAAD,eAAsBsD,IACtB,cAAC,IAAD,CAAOC,KAAI,UAAKL,EAAMK,MAAQC,OAAK,EAAnC,SACI,qBAAKxC,UAAU,WAAf,SACI,cAAC,IAAD,CAAMA,UAAU,YAAYgC,GAAE,UAAKE,EAAMO,IAAX,aAA9B,iCAGT,cAAC,IAAD,CAAOF,KAAI,UAAKL,EAAMK,KAAX,aAA4BG,UAAWzB,OAX5B","file":"static/js/4.3fb28da0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__Gx5Fo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__rR7q8\",\"loading\":\"NewCommentForm_loading__2pPwV\",\"control\":\"NewCommentForm_control__ObcZN\",\"actions\":\"NewCommentForm_actions__3XZ1b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2Xnt9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__rDyk2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__15tPr\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport {addComment} from '../../lib/api';\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const {sendRequest, status, error} = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if(status === 'completed' && !error) {\n      onAddedComment();\n    } \n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    if(enteredText.trim().length)\n      sendRequest( {commentData: { text: enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && <div className='centered'> <LoadingSpinner /></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = ({comments}) => {\n  return (\n    <ul className={classes.comments}>\n      {comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentsList from './CommentsList';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const {quoteId} = params;\n\n  const { sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if(status === 'pending') comments = (<div className='centered'> <LoadingSpinner /> </div>);\n  if(status === 'completed' && (loadedComments && loadedComments.length > 0 )) comments = (<CommentsList comments={loadedComments} />);\n  if(status === 'completed' && (!loadedComments || !loadedComments.length)) comments = (<p className='centered'> No comments were added yet</p>);\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler}  />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nimport { Link } from 'react-router-dom';\n\nconst HighlightedQuote = ({text, author, genre}) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{text}</p>\n      <figcaption>\n        <Link to={`/quotes/author/${author}`} className='btn'> {author} </Link>\n      </figcaption>\n      <Link to={`/quotes/genre/${genre}`} className='btn'> {genre} </Link>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import {useEffect} from 'react';\r\n\r\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote, getRandomQuote } from '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nconst QuoteDetail = () => {\r\n    const params = useParams();\r\n    const {quoteId} = params;\r\n    const match = useRouteMatch();\r\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(\r\n        quoteId ? getSingleQuote : getRandomQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n    \r\n    if(status === 'pending') return (<div className='centered'><LoadingSpinner /></div>);\r\n\r\n    if(error) return (<p className=\"centered focused\"> {error} </p>);\r\n\r\n    if(!loadedQuote.text) return <h2>No Quote Found!</h2>;\r\n\r\n    return (\r\n        <div>\r\n            {!quoteId && <button className='btn--flat' onClick={sendRequest} > Refresh </button>}\r\n            <HighlightedQuote {...loadedQuote} />\r\n            <Route path={`${match.path}`} exact>\r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={`${match.url}/comments`} > Show Comments </Link>\r\n                </div>\r\n            </Route>            \r\n           <Route path={`${match.path}/comments`} component={Comments} />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}