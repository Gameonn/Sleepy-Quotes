{"version":3,"sources":["components/Auth/AuthForm.module.css","components/Auth/AuthForm.js","pages/AuthPage.js"],"names":["module","exports","AuthForm","useState","isLogin","setIsLogin","isLoading","setIsLoading","history","useHistory","emailInputRef","useRef","passwordInputRef","authCtx","useContext","AuthContext","className","classes","auth","onSubmit","evt","preventDefault","enteredEmail","current","value","enteredPassword","email","password","route","fetch","process","method","body","JSON","stringify","returnSecureToken","header","then","res","console","log","ok","json","data","errorMessage","error","message","Error","expirationTime","Date","getTime","expiresIn","login","idToken","toISOString","replace","catch","err","alert","loginSignUpUser","control","htmlFor","type","id","ref","required","actions","LoadingSpinner","toggle","onClick","prevState","AuthPage"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,QAAU,0BAA0B,QAAU,0BAA0B,OAAS,2B,wGC+ElHC,EAzEE,WACf,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EAAUC,cACVC,EAAgBC,mBAChBC,EAAmBD,mBACnBE,EAAUC,qBAAWC,KA2C3B,OACE,0BAASC,UAAWC,IAAQC,KAA5B,UACE,6BAAKd,EAAU,QAAU,YACzB,uBAAMe,SAZY,SAACC,GACrBA,EAAIC,iBACJ,IAAMC,EAAeZ,EAAca,QAAQC,MACrCC,EAAkBb,EAAiBW,QAAQC,MACjDjB,GAAa,GAjCS,SAACmB,EAAOC,EAAUC,GACxCC,MAAM,sDAAD,OAAuDD,EAAvD,gBAAoEE,2CACzE,CACEC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAER,QAAOC,WAAUQ,mBAAmB,IAC3DC,OAAQ,CAAE,eAAgB,sBACzBC,MAAK,SAAAC,GAIN,OAHA/B,GAAa,GACbgC,QAAQC,IAAIF,GAETA,EAAIG,GACEH,EAAII,OAEJJ,EAAII,OAAOL,MAAK,SAAAM,GACrB,IAAIC,EAAe,wBAInB,MAHGD,GAAQA,EAAKE,OAASF,EAAKE,MAAMC,UAClCF,EAAeD,EAAKE,MAAMC,SAEtB,IAAIC,MAAMH,SAGnBP,MAAK,SAAAM,GACNJ,QAAQC,IAAIG,EAAM,YAClB,IAAMK,EAAiB,IAAIC,MAAK,IAAIA,MAAOC,UAA+B,KAAjBP,EAAKQ,WAC9DtC,EAAQuC,MAAMT,EAAKU,QAASL,EAAeM,eAC3C9C,EAAQ+C,QAAQ,QACfC,OAAM,SAAAC,GAAG,OAAIC,MAAMD,EAAIX,YAS1Ba,CAAgBrC,EAAcG,EADjBrB,EAAW,qBAAuB,WAO7C,UACE,sBAAKY,UAAWC,IAAQ2C,QAAxB,UACE,uBAAOC,QAAQ,QAAf,wBACA,uBAAOC,KAAK,QAAQC,GAAG,QAAQC,IAAKtD,EAAeuD,UAAQ,OAE7D,sBAAKjD,UAAWC,IAAQ2C,QAAxB,UACE,uBAAOC,QAAQ,WAAf,2BACA,uBAAOC,KAAK,WAAWC,GAAG,WAAWC,IAAKpD,EAAkBqD,UAAQ,OAEtE,sBAAKjD,UAAWC,IAAQiD,QAAxB,WACI5D,GAAa,wBAAQU,UAAU,MAAlB,SAAyBZ,EAAU,QAAU,mBAC3DE,GAAa,cAAC6D,EAAA,EAAD,IACd,wBAAQL,KAAK,SAAS9C,UAAWC,IAAQmD,OAAQC,QAzD3B,WAC5BhE,GAAW,SAACiE,GAAD,OAAgBA,MAwDrB,SACGlE,EAAU,qBAAuB,0CClE/BmE,UAJE,WACf,OAAO,cAAC,EAAD","file":"static/js/8.d90862ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__3tBFZ\",\"control\":\"AuthForm_control__1TtJN\",\"actions\":\"AuthForm_actions__veMBy\",\"toggle\":\"AuthForm_toggle__CYaog\"};","import { useState, useRef, useContext } from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport classes from './AuthForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport AuthContext from '../../store/auth-context';\n\nconst AuthForm = () => {\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const authCtx = useContext(AuthContext);\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const loginSignUpUser = (email, password, route) => {\n    fetch(`https://identitytoolkit.googleapis.com/v1/accounts:${route}?key=${process.env.REACT_APP_API_KEY}`, \n    {\n      method: 'POST',\n      body: JSON.stringify({ email, password, returnSecureToken: true}),\n      header: { 'Content-Type': 'application/json' }\n    }).then(res => {\n      setIsLoading(false);\n      console.log(res);\n      \n      if(res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          let errorMessage = 'Authentication Failed';\n          if(data && data.error && data.error.message) {\n            errorMessage = data.error.message;\n          }\n          throw new Error(errorMessage);\n        })\n      }\n    }).then(data => {\n      console.log(data, 'res json');\n      const expirationTime = new Date(new Date().getTime() + (+data.expiresIn * 1000))\n      authCtx.login(data.idToken, expirationTime.toISOString());\n      history.replace('/')\n    }).catch(err => alert(err.message) );\n  }\n\n  const submitHandler = (evt) => {\n    evt.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    setIsLoading(true);\n    let route = (isLogin) ? 'signInWithPassword' : 'signUp';\n    loginSignUpUser(enteredEmail, enteredPassword, route);\n  }\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor='email'>Your Email</label>\n          <input type='email' id='email' ref={emailInputRef} required />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='password'>Your Password</label>\n          <input type='password' id='password' ref={passwordInputRef} required />\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && <button className='btn'>{isLogin ? 'Login' : 'Create Account'}</button>}\n          {isLoading && <LoadingSpinner />}\n          <button type='button' className={classes.toggle} onClick={switchAuthModeHandler}>\n            {isLogin ? 'Create new account' : 'Login with existing account'}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from '../components/Auth/AuthForm';\n\nconst AuthPage = () => {\n  return <AuthForm />;\n};\n\nexport default AuthPage;\n"],"sourceRoot":""}