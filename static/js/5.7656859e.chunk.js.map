{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/CategorizedQuotes.js"],"names":["module","exports","QuoteItem","id","author","text","genre","location","useLocation","isQuoteRoute","pathname","includes","className","classes","item","style","width","to","QuoteList","props","quotes","ascending","history","useHistory","isSortAsc","URLSearchParams","search","get","sortedQuotes","sort","q1","q2","sorting","onClick","push","list","map","quote","NoQuotesFound","noquotes","CategorizedQuotes","isMain","params","useParams","authorName","keyword","useHttp","getAllQuotes","getAuthorQuotes","getGenreQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,gGCuBdC,EArBG,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAC9BC,EAAWC,cACXC,GAAgBF,EAASG,SAASC,SAAS,YAAcJ,EAASG,SAASC,SAAS,SAE1F,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,yBAAQC,MAAO,CAACC,MAAOP,EAAe,MAAO,QAA7C,UACE,qCACE,4BAAIJ,MAEN,uCACA,eAAC,IAAD,CAAMY,GAAE,yBAAoBb,GAA5B,cAAyCA,EAAzC,OADA,KAEA,eAAC,IAAD,CAAMa,GAAE,wBAAmBX,GAA3B,cAAuCA,EAAvC,aAIAG,GAAgB,cAAC,IAAD,CAAMQ,GAAE,kBAAad,GAAMS,UAAU,MAArC,iC,iBCwBTM,EA9BG,SAACC,GACjB,IARkBC,EAAQC,EAQpBC,EAAUC,cACVhB,EAAWC,cAGXgB,EAAwC,QAD1B,IAAIC,gBAAgBlB,EAASmB,QACnBC,IAAI,QAC5BC,GAbYR,EAacD,EAAMC,OAbZC,EAaoBG,EAZvCJ,EAAOS,MAAK,SAACC,EAAIC,GACtB,OAAIV,EACQS,EAAGzB,KAAO0B,EAAG1B,KAAO,GAAK,EADfyB,EAAGzB,KAAO0B,EAAG1B,KAAO,GAAK,MAqBjD,OACE,eAAC,WAAD,WACE,qBAAKO,UAAWC,IAAQmB,QAAxB,SACE,yBAAQC,QAXe,WAC3BX,EAAQY,KAAK,CACXxB,SAAUH,EAASG,SACnBgB,OAAO,SAAD,OAAWF,EAAY,OAAS,UAQpC,mBAA8CA,EAAY,MAAQ,OAAlE,SAEF,oBAAIZ,UAAWC,IAAQsB,KAAvB,SACGP,EAAaQ,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,eAA8BA,GAAdA,EAAMlC,a,iBCtBjBmC,EAVO,WACpB,IAAM/B,EAAWC,cACjB,OACE,sBAAKI,UAAWC,IAAQ0B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMtB,GAAE,UAAKV,EAASG,SAAd,QAA8BE,UAAU,MAAhD,+B,uBCmBS4B,UApBW,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClBC,EAASC,cACRC,EAAqBF,EAArBE,WAAYtC,EAASoC,EAATpC,MACbuC,EAAUD,GAA0BtC,EAC1C,EAA2DwC,YACvDL,EAASM,IAAgBH,EAAaI,IAAkBC,KAAiB,GADrEC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcC,EAAnC,EAA6BC,KAAoBC,EAAjD,EAAiDA,MAOjD,OAJAC,qBAAU,WACNL,EAAYL,KACb,CAACK,EAAaL,IAEH,YAAXM,EAA8B,qBAAKvC,UAAU,WAAf,SAA0B,cAAC4C,EAAA,EAAD,MAExDF,EAAe,oBAAG1C,UAAU,mBAAb,cAAkC0C,EAAlC,OAEJ,cAAXH,GAA4BC,GAAiBA,EAAaK,OAEtD,cAAC,EAAD,CAAWrC,OAAQgC,IAFmD,cAAC,EAAD","file":"static/js/5.7656859e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__1cpuo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__1VYvh\",\"sorting\":\"QuoteList_sorting__xsE8f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__2JhTo\"};","import classes from './QuoteItem.module.css';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst QuoteItem = ({id, author, text, genre}) => {\n  const location = useLocation();\n  const isQuoteRoute = !location.pathname.includes('author') && !location.pathname.includes('genre');\n\n  return (\n    <li className={classes.item}>\n      <figure style={{width: isQuoteRoute ? '70%': '100%'}}>\n        <blockquote>\n          <p>{text}</p>\n        </blockquote>\n        <figcaption>          \n        <Link to={`/quotes/author/${author}`} > {author} </Link> ,\n        <Link to={`/quotes/genre/${genre}`} > {genre} </Link>\n        </figcaption>\n        \n      </figure>\n      { isQuoteRoute && <Link to={`/quotes/${id}`} className='btn'>View Fullscreen</Link>}\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((q1, q2) => {\n    if(!ascending) return q1.text > q2.text ? 1 : -1;\n    else return q1.text < q2.text ? 1 : -1;\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n  \n  const queryParams = new URLSearchParams(location.search);\n  const isSortAsc = queryParams.get('sort') === 'asc';\n  const sortedQuotes = sortQuotes(props.quotes, isSortAsc);\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${isSortAsc ? 'desc' : 'asc'}`\n    });\n    // history.push(`${location.pathname}?sort=${isSortAsc ? 'desc' : 'asc'}`)\n  } \n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}> Sort {isSortAsc ? 'Asc' : 'Desc'} </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem key={quote.id} {...quote} />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import classes from './NoQuotesFound.module.css';\n\nimport { Link, useLocation } from 'react-router-dom'\n\nconst NoQuotesFound = () => {\n  const location = useLocation();\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to={`${location.pathname}/new`} className='btn'> Add a Quote </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport QuoteList from '../components/quotes/QuoteList';\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getAllQuotes, getAuthorQuotes, getGenreQuotes } from '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nconst CategorizedQuotes = ({isMain}) => {\r\n    const params = useParams();\r\n    const {authorName, genre} = params;\r\n    const keyword = authorName ? authorName : genre;\r\n    const { sendRequest, status, data: loadedQuotes, error } = useHttp(\r\n        isMain ? getAllQuotes : (authorName ? getAuthorQuotes : getGenreQuotes), true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(keyword);\r\n    }, [sendRequest, keyword]);\r\n\r\n    if(status === 'pending') return (<div className='centered'><LoadingSpinner /></div>);\r\n\r\n    if(error) return (<p className=\"centered focused\"> {error} </p>);\r\n\r\n    if(status === 'completed' && (!loadedQuotes || !loadedQuotes.length)) return <NoQuotesFound />;\r\n\r\n    return <QuoteList quotes={loadedQuotes} />\r\n}\r\n\r\nexport default CategorizedQuotes;"],"sourceRoot":""}